@page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new Telerik Blazor app.

<TelerikListBox @ref="@ListBoxRef1"
                Data="@ListBoxData1"
                TItem="@ListBoxModel"
                TextField="@nameof(ListBoxModel.Name)"
                Id="listbox1"
                ConnectedListBoxId="listbox2"
                SelectionMode="@ListBoxSelectionMode.Multiple"
                SelectedItems="@ListBoxSelectedItems1"
                SelectedItemsChanged="@OnListBoxSelectedItemsChanged"
                Draggable="true"
                DropSources="@ListBoxDropSources"
                OnDrop="( (ListBoxDropEventArgs<ListBoxModel> args) =>
                        OnListBoxDrop(args, ListBoxId1, ListBoxData1) )"
                OnRemove="@OnListBoxRemove"
                OnReorder="@OnListBoxReorder"
                OnTransfer="@OnListBoxTransfer"
                Height="300px">
</TelerikListBox>

<TelerikListBox @ref="@ListBoxRef2"
                Data="@ListBoxData2"
                TItem="@ListBoxModel"
                TextField="@nameof(ListBoxModel.Name)"
                Id="listbox2"
                SelectionMode="@ListBoxSelectionMode.Multiple"
                @bind-SelectedItems="@ListBoxSelectedItems2"
                Draggable="true"
                DropSources="@ListBoxDropSources"
                OnDrop="( (ListBoxDropEventArgs<ListBoxModel> args) =>
                        OnListBoxDrop(args, ListBoxId2, ListBoxData2) )"
                Height="300px">
    <ListBoxToolBarSettings>
        <ListBoxToolBar Visible="false" />
    </ListBoxToolBarSettings>
</TelerikListBox>

<h2>Last Fired Event</h2>

<p>@( new MarkupString(LastEventLog) )</p>

@code {
    private TelerikListBox<ListBoxModel> ListBoxRef1 { get; set; } = null!;
    private TelerikListBox<ListBoxModel> ListBoxRef2 { get; set; } = null!;

    private const string ListBoxId1 = "listbox1";
    private const string ListBoxId2 = "listbox2";

    private List<ListBoxModel> ListBoxData1 { get; set; } = new List<ListBoxModel>();
    private List<ListBoxModel> ListBoxData2 { get; set; } = new List<ListBoxModel>();

    private IEnumerable<ListBoxModel> ListBoxSelectedItems1 { get; set; } = new List<ListBoxModel>();
    private IEnumerable<ListBoxModel> ListBoxSelectedItems2 { get; set; } = new List<ListBoxModel>();

    private List<string> ListBoxDropSources => new List<string>() { ListBoxId1, ListBoxId2 };

    private string LastEventLog { get; set; } = string.Empty;

    private void OnListBoxDrop(
        ListBoxDropEventArgs<ListBoxModel> args,
        string sourceListBoxId,
        List<ListBoxModel> sourceData)
    {
        var destinationIndex = args.DestinationIndex ?? 0;
        var destinationData = GetListBoxDataFromId(args.DestinationListBoxId);

        if (args.DestinationListBoxId == sourceListBoxId)
        {
            ReorderItems(args.Items, sourceData, destinationIndex);
        }
        else
        {
            MoveItems(args.Items, sourceData, destinationData, destinationIndex);
        }

        ListBoxRef1.Rebind();
        ListBoxRef2.Rebind();

        LastEventLog = $"<strong>OnDrop</strong> fired at {DateTime.Now.ToLongTimeString()}. " +
            $"Moved <strong>{args.Items.Count}</strong> item(s) " +
            $"to index <strong>{args.DestinationIndex}</strong> " +
            $"in ListBox <strong>{args.DestinationListBoxId}</strong>.";
    }

    private void OnListBoxRemove(ListBoxRemoveEventArgs<ListBoxModel> args)
    {
        foreach (var item in args.Items)
        {
            ListBoxData1.Remove(item);
        }

        ListBoxRef1.Rebind();

        LastEventLog = $"<strong>OnRemove</strong> fired at {DateTime.Now.ToLongTimeString()}. " +
            $"Removed <strong>{args.Items.Count}</strong> item(s).";
    }

    private void OnListBoxReorder(ListBoxReorderEventArgs<ListBoxModel> args)
    {
        ListBoxData1.RemoveAll(x => args.Items.Contains(x));
        ListBoxData1.InsertRange(args.ToIndex, args.Items);

        ListBoxRef1.Rebind();

        LastEventLog = $"<strong>OnReorder</strong> fired at {DateTime.Now.ToLongTimeString()}. " +
            $"Reordered <strong>{args.Items.Count}</strong> item(s) " +
            $"from index <strong>{args.FromIndex}</strong> to index <strong>{args.ToIndex}</strong>.";
    }

    private void OnListBoxTransfer(ListBoxTransferEventArgs<ListBoxModel> args)
    {
        if (args.DestinationListBoxId == ListBoxId1)
        {
            foreach (var item in args.Items)
            {
                ListBoxData2.RemoveAll(x => args.Items.Any(y => y.Id == x.Id));
                ListBoxData1.Add(item);
            }
        }
        else
        {
            foreach (var item in args.Items)
            {
                ListBoxData1.RemoveAll(x => args.Items.Any(y => y.Id == x.Id));
                ListBoxData2.Add(item);
            }
        }

        ListBoxRef1.Rebind();
        ListBoxRef2.Rebind();

        LastEventLog = $"<strong>OnTransfer</strong> fired at {DateTime.Now.ToLongTimeString()}. " +
            $"Moved <strong>{args.Items.Count}</strong> item(s)" +
            $"to ListBox <strong>{args.DestinationListBoxId}</strong>.";
    }

    private void OnListBoxSelectedItemsChanged(IEnumerable<ListBoxModel> newSelected)
    {
        ListBoxSelectedItems1 = newSelected;

        LastEventLog = $"<strong>SelectedItemsChanged</strong> fired at {DateTime.Now.ToLongTimeString()}." +
            $"The selected items count is <strong>{newSelected.Count()}</strong>";
    }

    private void ReorderItems(
    List<ListBoxModel> items,
    List<ListBoxModel> collection,
    int destinationIndex)
    {
        collection.RemoveAll(x => items.Contains(x));

        if (destinationIndex >= 0)
        {
            collection.InsertRange(destinationIndex, items);
        }
        else
        {
            collection.AddRange(items);
        }
    }

    private void MoveItems(
        List<ListBoxModel> items,
        List<ListBoxModel> sourceData,
        List<ListBoxModel> destinationData,
        int destinationIndex)
    {
        foreach (var item in items)
        {
            sourceData.RemoveAll(x => items.Any(y => y.Id == x.Id));

            if (destinationIndex >= 0)
            {
                destinationData.Insert(destinationIndex, item);
            }
            else
            {
                destinationData.Add(item);
            }
        }
    }

    private List<ListBoxModel> GetListBoxDataFromId(string listBoxId)
    {
        var collection = new List<ListBoxModel>();

        switch (listBoxId)
        {
            case ListBoxId1:
                collection = ListBoxData1;
                break;
            case ListBoxId2:
                collection = ListBoxData2;
                break;
            default:
                break;
        }

        return collection;
    }

    protected override void OnInitialized()
    {
        for (int i = 1; i <= 7; i++)
        {
            ListBoxData1.Add(new ListBoxModel()
            {
                Id = i,
                Name = $"Item {i}",
            });
        }

        base.OnInitialized();
    }

    public class ListBoxModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
